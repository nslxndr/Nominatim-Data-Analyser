---
QUERY:
  type: SQLProcessor
  query: >
    WITH postcode_formats(country_code, expr, format) AS ( VALUES
      ('ad', '(AD)?([0-9][0-9][0-9])', '(AD)?(ddd)'),
      ('af', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('ai', 'AI(-)?2640', 'AI(-)?2640'),
      ('al', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('am', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('ar', '([A-Z])?([0-9][0-9][0-9][0-9])([A-Z][A-Z][A-Z])?', '(l)?(dddd)(lll)?'),
      ('at', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('au', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('az', '(AZ ?)?([0-9][0-9][0-9][0-9])', '(AZ ?)?(dddd)'),
      ('ba', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('bb', '(BB ?)?([0-9][0-9][0-9][0-9][0-9])', '(BB ?)?(ddddd)'),
      ('bd', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('be', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('bg', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('bh', '[0-9]?[0-9][0-9][0-9]', 'd?ddd'),
      ('bm', '([A-Z][A-Z])[ -]?([0-9][0-9])', '(ll)[ -]?(dd)'),
      ('bn', '([A-Z][A-Z]) ?([0-9][0-9][0-9][0-9])', '(ll) ?(dddd)'),
      ('br', '([0-9][0-9][0-9][0-9][0-9])-?([0-9][0-9][0-9])', '(ddddd)-?(ddd)'),
      ('bt', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('by', '[0-9][0-9][0-9][0-9][0-9][0-9]', 'dddddd'),
      ('ca', '([A-Z][0-9][A-Z]) ?([0-9][A-Z][0-9])', '(ldl) ?(dld)'),
      ('ch', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('cl', '[0-9][0-9][0-9][0-9][0-9][0-9][0-9]', 'ddddddd'),
      ('cn', '[0-9][0-9][0-9][0-9][0-9][0-9]', 'dddddd'),
      ('co', '[0-9][0-9][0-9][0-9][0-9][0-9]', 'dddddd'),
      ('cr', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('cu', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('cv', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('cy', '(99|[0-9])[0-9][0-9][0-9]', '(99|d)ddd'),
      ('cz', '([0-9][0-9][0-9]) ?([0-9][0-9])', '(ddd) ?(dd)'),
      ('de', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('dk', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('do', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('dz', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('ec', '(EC)?([0-9][0-9][0-9][0-9][0-9][0-9])', '(EC)?(dddddd)'),
      ('ee', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('eg', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('es', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('et', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('fi', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('fk', 'FIQQ 1ZZ', 'FIQQ 1ZZ'),
      ('fm', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('fo', '[0-9][0-9][0-9]', 'ddd'),
      ('fr', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('gb', '([A-Z]?[A-Z][0-9][A-Z0-9]?)( [0-9]([A-Z][A-Z])?)?', '(l?ld[A-Z0-9]?)( d(ll)?)?'),
      ('ge', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('gg', '(GY[0-9][0-9]?) ?([0-9][A-Z][A-Z])', '(GYdd?) ?(dll)'),
      ('gh', '[A-Z][A-Z]-[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]', 'll-dddd-dddd'),
      ('gi', '(GX11) ?(1AA)', '(GX11) ?(1AA)'),
      ('gl', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('gn', '[0-9][0-9][0-9]', 'ddd'),
      ('gr', '([0-9][0-9][0-9]) ?([0-9][0-9])', '(ddd) ?(dd)'),
      ('gs', 'SIQQ 1ZZ', 'SIQQ 1ZZ'),
      ('gt', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('gw', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('hn', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('hr', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('ht', '(HT)?([0-9][0-9][0-9][0-9])', '(HT)?(dddd)'),
      ('hu', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('id', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('ie', '([A-Z][0-9][0-9]) ?([0123456789ACDEFHKNPRTVWXY]{4})', '(ldd) ?([0123456789ACDEFHKNPRTVWXY]{4})'),
      ('il', '[0-9][0-9][0-9][0-9][0-9][0-9][0-9]', 'ddddddd'),
      ('im', '(IM[0-9][0-9]?) ?([0-9][A-Z][A-Z])', '(IMdd?) ?(dll)'),
      ('in', '([0-9][0-9][0-9]) ?([0-9][0-9][0-9])', '(ddd) ?(ddd)'),
      ('io', 'BBND ?1ZZ', 'BBND ?1ZZ'),
      ('iq', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('ir', '([0-9][0-9][0-9][0-9][0-9])[-_ ]?([0-9][0-9][0-9][0-9][0-9])', '(ddddd)[-_ ]?(ddddd)'),
      ('is', '[0-9][0-9][0-9]', 'ddd'),
      ('it', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('je', '(JE[0-9][0-9]?) ?([0-9][A-Z][A-Z])', '(JEdd?) ?(dll)'),
      ('jm', '(KINGSTON)|(KGN) ?([0-9][0-9]?)', '(KINGSTON)|(KGN) ?(dd?)'),
      ('jo', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('jp', '([0-9][0-9][0-9])-?([0-9][0-9][0-9][0-9])', '(ddd)-?(dddd)'),
      ('ke', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('kg', '[0-9][0-9][0-9][0-9][0-9][0-9]', 'dddddd'),
      ('kh', '[0-9][0-9][0-9][0-9][0-9][0-9]', 'dddddd'),
      ('kn', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('kr', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('kw', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('ky', 'KY-?([0-9])-([0-9][0-9][0-9][0-9])', 'KY-?(d)-(dddd)'),
      ('kz', '([A-Z][0-9][0-9][A-Z][0-9][A-Z][0-9])|([0-9][0-9][0-9][0-9][0-9][0-9])', '(lddldld)|(dddddd)'),
      ('la', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('lb', '([0-9][0-9][0-9][0-9]) ?([0-9][0-9][0-9][0-9])?', '(dddd) ?(dddd)?'),
      ('lc', 'LC([0-9][0-9]) ?([0-9][0-9][0-9])', 'LC(dd) ?(ddd)'),
      ('li', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('lk', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('lr', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('ls', '[0-9][0-9][0-9]', 'ddd'),
      ('lt', '(LT-?)?([0-9][0-9][0-9][0-9][0-9])', '(LT-?)?(ddddd)'),
      ('lu', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('lv', 'LV-([0-9][0-9][0-9][0-9])', 'LV-(dddd)'),
      ('ma', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('mc', '980[0-9][0-9]', '980dd'),
      ('md', '(MD-?)?([0-9][0-9][0-9][0-9])', '(MD-?)?(dddd)'),
      ('me', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('mg', '[0-9][0-9][0-9]', 'ddd'),
      ('mh', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('mk', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('mm', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('mn', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('mt', '([A-Z][A-Z][A-Z]) ?([0-9][0-9][0-9][0-9])', '(lll) ?(dddd)'),
      ('mu', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('mv', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('mx', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('my', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('mz', '([0-9][0-9][0-9][0-9])(-[0-9][0-9])?', '(dddd)(-dd)?'),
      ('na', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('ne', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('ng', '[0-9][0-9][0-9][0-9][0-9][0-9]', 'dddddd'),
      ('ni', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('nl', '[0-9][0-9][0-9][0-9]([A-Z][A-Z])?', 'dddd(ll)?'),
      ('no', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('np', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('nz', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('om', '[0-9][0-9][0-9]', 'ddd'),
      ('pa', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('pe', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('pg', '[0-9][0-9][0-9]', 'ddd'),
      ('ph', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('pk', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('pl', '([0-9][0-9])-([0-9][0-9][0-9])', '(dd)-(ddd)'),
      ('pn', 'PCRN 1ZZ', 'PCRN 1ZZ'),
      ('ps', '[0-9][0-9][0-9]', 'ddd'),
      ('pt', '([0-9][0-9][0-9][0-9])(-[0-9][0-9][0-9])?', '(dddd)(-ddd)?'),
      ('pw', '(96939)|(96940)', '(96939)|(96940)'),
      ('py', '[0-9][0-9][0-9][0-9][0-9][0-9]', 'dddddd'),
      ('ro', '[0-9][0-9][0-9][0-9][0-9][0-9]', 'dddddd'),
      ('rs', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('ru', '[0-9][0-9][0-9][0-9][0-9][0-9]', 'dddddd'),
      ('sd', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('se', '([0-9][0-9][0-9]) ?([0-9][0-9])', '(ddd) ?(dd)'),
      ('sg', '[0-9][0-9][0-9][0-9][0-9][0-9]', 'dddddd'),
      ('sh', '(ASCN)|(STHL)|(TDCU) 1ZZ', '(ASCN)|(STHL)|(TDCU) 1ZZ'),
      ('si', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('sk', '([0-9][0-9][0-9]) ?([0-9][0-9])', '(ddd) ?(dd)'),
      ('sm', '4789[0-9]', '4789d'),
      ('sn', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('so', '[A-Z][A-Z] [0-9][0-9][0-9][0-9][0-9]', 'll ddddd'),
      ('sv', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('sz', '[A-Z][0-9][0-9][0-9]', 'lddd'),
      ('tc', 'TKCA 1ZZ', 'TKCA 1ZZ'),
      ('th', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('tj', '[0-9][0-9][0-9][0-9][0-9][0-9]', 'dddddd'),
      ('tm', '[0-9][0-9][0-9][0-9][0-9][0-9]', 'dddddd'),
      ('tn', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('tr', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('tt', '[0-9][0-9][0-9][0-9][0-9][0-9]', 'dddddd'),
      ('tw', '[0-9][0-9][0-9]([0-9][0-9][0-9]?)?', 'ddd(ddd?)?'),
      ('tz', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('ua', '[0-9]?[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('um', '96898', '96898'),
      ('us', '([0-9][0-9][0-9][0-9][0-9])(-[0-9][0-9][0-9][0-9])?', '(ddddd)(-dddd)?'),
      ('uy', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('uz', '[0-9][0-9][0-9][0-9][0-9][0-9]', 'dddddd'),
      ('va', '00120', '00120'),
      ('vc', 'VC([0-9][0-9][0-9][0-9])', 'VC(dddd)'),
      ('ve', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('vg', '(VG ?)?([0-9][0-9][0-9][0-9])', '(VG ?)?(dddd)'),
      ('vn', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('xk', '[0-9][0-9][0-9][0-9][0-9]', 'ddddd'),
      ('za', '[0-9][0-9][0-9][0-9]', 'dddd'),
      ('zm', '[0-9][0-9][0-9][0-9]', 'dddd')
    )
    SELECT ST_AsText(centroid) AS geometry_holder, osm_id, osm_type,
           address, address->'postcode' as postcode, postcode_formats.format,
           upper(placex.country_code) as country_code
           FROM placex, postcode_formats
           WHERE address ? 'postcode' and address->'postcode' not similar to '%[,;]%'
                 and not address ? '_inherited'
                 and placex.country_code = postcode_formats.country_code
                 and address->'postcode' !~ ('^' || postcode_formats.expr || '$')
  out:
    LOOP_PROCESSING:
      type: LoopDataProcessor
      sub_pipeline: !sub-pipeline
        GEOMETRY_CONVERTER:
          type: GeometryConverter
          geometry_type: Node
          out:
            FEATURE_CONVERTER:
              type: GeoJSONFeatureConverter
              properties:
                - !switch
                  expression: osm_type
                  cases:
                    'N':
                      node_id: !variable osm_id
                    'W':
                      way_id: !variable osm_id
                    'R':
                      relation_id: !variable osm_id
                - postcode: !variable postcode
                - country: !variable country_code
                - format: !variable format
      out:
        CLUSTERING_VECTOR_TILES:
          type: ClustersVtFormatter
          radius: 60
          out:
            LAYER_FILE:
              type: OsmoscopeLayerFormatter
              data_format_url: vector_tile_url
              name: Unusual Postcode Format
              update: Every evening
              doc:
                description: |
                  This view shows postcode tags (addr:postcode, postal_code etc.)
                  which are not formatted according to the official postcode
                  standards of the country.
                why_problem: |
                  Postcodes in a different format are usually a typo.
                how_to_fix: |
                  The 'format' field gives you a hint about how the expected
                  postcode should look like. 'd' means a digit (0-9), 'l' means
                  an upper-case letter (A-Z). 'country' tells you what country
                  Nominatim thinks the object belongs to.
